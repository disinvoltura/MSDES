/*
* Copyright (c) Donghun Kang and Byoung K. Choi.  
* This file is part of the book, "Modeling and Simulation of Discrete-Event Systems". 
*/

/* 
 * This code is automatically generated by State Graph Simulator, Copyright (C) Donghun Kang, VMS Laboratory.
 * Date: 2013-09-16
 * Time: 16:41
 * Model Name: Friend
 *
 */

using VMS.StateGraph.Simulation;

namespace MSDES.Chap09.TableTennisGame
{
    /// <summary>
    /// Enumerator for Friend's State
    /// </summary>
    public enum FriendState { End, OVER, STOP, Watch };

    /// <summary>
    /// Atomic Simulator for Friend
    /// </summary>
    public class Friend : AtomicSimulator
    {
        #region Variables 
        /// <summary>
        /// Current State
        /// </summary>
        public FriendState STATE;

        /// <summary>
        /// Quit Time
        /// </summary>
        public int qt;
        #endregion

        #region Properties
        public override string CurrentState
        {
            get { return this.STATE.ToString(); }
        }
        #endregion

        #region Constructors
        public Friend(string name)
            : base(name)
        {
            qt = 0;
        }
        #endregion

        #region Methods
        public override void Run()
        {
            State_Watch(0.0);
        }

        public override void ExternalInput(INPUT input)
        {
            switch (STATE)
            {
                case FriendState.End:
                    EXT_State_End(input);
                    break;
                case FriendState.Watch:
                    EXT_State_Watch(input);
                    break;
                default:
                    WriteError("No matching state.", "ExternalInput()");
                    break;
            }
        }

        public override object getStateVariable(string name)
        {
            return null;
        }
        #endregion

        #region StateX Methods
        private void State_End(double now)
        {
            STATE = FriendState.End;

            //Entry Action
            _Clock = now;
            Send_TAR(double.MaxValue, "OVER");
        }

        private void EXT_State_End(INPUT input)
        {
            if (input.Type == InputType.MDP)
            {
                MDP mdp = input.Record as MDP;
                if (mdp.Msg.Equals("OVER"))
                {
                    //Transition Action
                    //Next State
                    State_OVER(mdp.Now); //Next State
                }
                else if (mdp.Msg.Equals("STOP"))
                {
                    //Transition Action
                    //Next State
                    State_STOP(mdp.Now); //Next State
                }
                else
                    WriteError("No matching message.", "EXT_State_End()");
            }
            else
                WriteError("No matching input.", "EXT_State_End()");
        }

        private void State_OVER(double now)
        {
            STATE = FriendState.OVER;
        }

        private void State_Watch(double now)
        {
            STATE = FriendState.Watch;

            //Entry Action
            _Clock = now;
            Send_TAR(_Clock + qt, "Over", "OVER");
        }

        private void EXT_State_Watch(INPUT input)
        {
            if (input.Type == InputType.TAG)
            {
                TAG tag = input.Record as TAG;
                if (true) //Condition
                {
                    //Transition Action
                    Send_MSR("Quit");
                    //Next State
                    State_End(tag.Now); //Next State
                }
            }
            else if (input.Type == InputType.MDP)
            {
                MDP mdp = input.Record as MDP;
                if (mdp.Msg.Equals("Over"))
                {
                    if (true) //Condition
                    {
                        //Transition Action
                        //Next State
                        State_End(mdp.Now); //Next State
                    }
                }
                else if (mdp.Msg.Equals("OVER"))
                {
                    //Transition Action
                    //Next State
                    State_OVER(mdp.Now); //Next State
                }
                else
                    WriteError("No matching message.", "EXT_State_Watch()");
            }
        }

        #endregion
    }
}